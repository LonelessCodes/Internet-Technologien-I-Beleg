@import "base.css";
@import "input.css";
@import "button.css";
@import "dialog.css";

html {
  background-color: var(--white-color);
  color: var(--text-color);
  font-size: var(--font-size);
  font-family: var(--font-sans);
}

/*
Für viele CSS-Properties gibt es einzeln veränderbare Teile wie
border-color für border, padding-left für padding usw.
Bei box-shadow ist es aber nicht möglich einzeln verschiedene Shadows auf
dem selben Element zu ändern. Deswegen haben wir eine Klasse, die box-shadow
für den Focus-Ring und den normalen shadow setzen kann, und dann die Werte der
Variablen einsetzt, wenn diese auf dem Element gesetzt werden (z.B. über .focusable)

So löst es z.B. Tailwind CSS
*/
.shadow {
  box-shadow:
    var(--ring-shadow, var(--no-shadow)),
    var(--shadow, var(--no-shadow));
}

/*
Eine Utility-Klasse um einen Focus-Ring um ein Element zu zaubern, wenn
dieses fokusiert ist
*/
.focusable {
  --ring-shadow: var(--no-shadow);
}
.focusable:not(:disabled):focus {
  --ring-shadow: 0 0 0 3px var(--focus-ring-color);
  border-color: var(--focus-border-color);
}

/* here was button */

main {
  width: 100%;
  max-width: 1000px;
  height: 100vh;
  margin: 0 auto;
  padding: 1rem 1.5rem;
  position: relative;
}
.main-content {
  text-align: center;
}

.timer-wrapper {
  display: none;
}
.timer-wrapper-show {
  display: initial;
}

.noscript {
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  backdrop-filter: blur(20px);
  background-color: var(--modal-background-color);
}
.noscript > div {
  background-color: var(--white-color);

  max-inline-size: min(90vw, 60ch);
  max-block-size: min(88vh, 100%);
  margin: 6vh auto auto auto;
  padding: 1rem 1.25rem;

  z-index: 100;
  overflow: hidden;
  border-radius: var(--border-radius-xl);
  
  box-shadow: var(--shadow-lg);
}
